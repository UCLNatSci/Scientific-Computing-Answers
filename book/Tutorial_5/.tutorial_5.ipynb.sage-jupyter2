{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-fff7a99f-e0a8-4c42-b584-a3bf98d1f2f1.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"50fd9f","input":"","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"bf0d1d","input":"# 2\n\nimport numpy as np\nfrom matplotlib import animation\nfrom IPython.display import HTML, display\nimport random\n\n## Inner planets: Using arrays and for loops\n\nau = 1.496e8\nyear = 365.256\n\n# Inner planets only\ndistances = np.array([[0.387, 0.723, 1, 1.524]]) * au\nperiods = np.array([[87.969, 224.701, 1*year, 686.98]])\n\n# Make animation last for full orbit of Mars, 10 day intervals\n# (N.B.: [:, np.newaxis] is needed for succesful broadcasting)\nt = np.arange(0, np.amax(periods), 10)[:, np.newaxis]\n\n# Compute orbital coordinates\nx_planets = distances * np.cos(2*np.pi*t/periods)\ny_planets = distances * np.sin(2*np.pi*t/periods)\n\nplt.figure()\nplt.plot(x_planets, t)\nplt.plot(y_planets, t)\n\nplt.figure()\nplt.plot(x_planets, y_planets)\n","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fe0f70a4d90>,\n <matplotlib.lines.Line2D at 0x7fe0f70a4dc0>,\n <matplotlib.lines.Line2D at 0x7fe0f70a4ee0>,\n <matplotlib.lines.Line2D at 0x7fe0f70b1040>]"},"exec_count":12,"output_type":"execute_result"},"1":{"data":{"image/png":"a8b6b3f02698d76104ff845b7658ca4572ec2005","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":12,"metadata":{"image/png":{"height":423,"width":710},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"9a110eb779519694c2a17a979ddfb4896c2f2e30","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":12,"metadata":{"image/png":{"height":434,"width":705},"needs_background":"light"},"output_type":"execute_result"}},"pos":3,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"dd380a","input":"# Set up figure\nfilename = \"animation.gif\"\ninterval = 100\nframes = len(t)\n\ndef ganimate(frame):\n    plt.cla()\n    \n    # Plot a yellow circle in the middle to represent the Sun\n    plt.plot(0,0, 'oy')\n    \n    # For each planet, plot its current position for the frame\n    for p in range(max(periods.shape)):\n        plt.scatter(x_planets[frame, p], y_planets[frame, p])\n    \n    # Set axis limits to correspond to the minimum and maximum x and y positions\n    # out of all planet orbits\n    plt.xlim(np.amin(x_planets), np.amax(x_planets))\n    plt.ylim(np.amin(y_planets), np.amax(y_planets))\n    \nfig = plt.figure(figsize=(5, 5))\n\nanim = animation.FuncAnimation(fig, ganimate, frames=frames, interval=interval)\nanim.save(filename, writer='imagemagick')\nplt.close()\n\n__counter__ = str(random.randint(0,2e9))\ndisplay(HTML('<img src=\"' + filename + '?' + __counter__ + '\">'))","output":{"0":{"data":{"text/html":"<img src=\"animation.gif?95257222\">","text/plain":"<IPython.core.display.HTML object>"},"exec_count":14,"output_type":"execute_result"}},"pos":4,"scrolled":true,"tags":{"remove-output":true},"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"e2eccc","input":"import numpy as np\nimport matplotlib.pyplot as plt\n\na = 0.1\nb = 0.00005\nS_0 = 20000\nI_0 = 100\nn_days = 100\n\nt = np.arange(0, n_days, 1)\nS = np.zeros(n_days)\nI = np.zeros(n_days)\nS[0] = S_0\nI[0] = I_0\n\n\nfor i in range(n_days - 1):\n    S[i+1] = S[i] - b * S[i] * I[i]\n    I[i+1] = I[i] + b * S[i] * I[i] - a * I[i]\n    \nR = S_0 + I_0 - S - I\n    \nplt.plot(t, S, label=\"Susceptible\")\nplt.plot(t, I, label=\"Infected\")\nplt.plot(t, R, label=\"Recovered\")\n\nplt.legend()","output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x7fe0f7228580>"},"exec_count":19,"output_type":"execute_result"},"1":{"data":{"image/png":"fdf3077a8ea64ad252f26c3b85491f4ed9a748b0","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":19,"metadata":{"image/png":{"height":411,"width":723},"needs_background":"light"},"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"a9bf7f","input":"# 1\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\np = 365\nd = 1\nt = np.arange(0, 365)\nx = d * np.cos(2*np.pi*t/p)\ny = d * np.sin(2*np.pi*t/p)\n\nplt.plot(t, x)\nplt.plot(t, y)\n\nplt.figure(figsize=(4,4))\nplt.plot(x, y)","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fe0f76b6ac0>]"},"exec_count":2,"output_type":"execute_result"},"1":{"data":{"image/png":"a545f1dbc6f96b02f0fbcc64f0624c04d35e57fb","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":2,"metadata":{"image/png":{"height":411,"width":721},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"24792f98c32b6f435efc9d25b7f276485b4e00ce","text/plain":"<Figure size 288x288 with 1 Axes>"},"exec_count":2,"metadata":{"image/png":{"height":248,"width":275},"needs_background":"light"},"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"558944","input":"n = 100\nb_vals = np.linspace(0, 0.00005, n)\nb_vals\n\npeak_I = np.zeros(n)\n\nfor i in range(n):\n    b = b_vals[i]\n    peak_I[i] = max_I(a, b)\n    \nplt.plot(b_vals, peak_I)","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fe0f6eae400>]"},"exec_count":23,"output_type":"execute_result"},"1":{"data":{"image/png":"2430f49145194cd965245b90fbeb13aedb47550d","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":23,"metadata":{"image/png":{"height":423,"width":723},"needs_background":"light"},"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"ce7785","input":"def max_I(a, b):\n    \n    t_max = 100\n    S_0 = 20000\n    I_0 = 100\n    t = np.arange(t_max)\n    S = np.zeros(t_max)\n    I = np.zeros(t_max)\n    R = np.zeros(t_max)\n\n    S[0] = S_0\n    I[0] = I_0\n    for i in range(t_max - 1):\n        S[i+1] = S[i] - b * S[i] * I[i]\n        I[i+1] = I[i] + b * S[i] * I[i] - a * I[i]\n    \n    return np.max(I)","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"217f95","input":"","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"89edb6","input":"![](animation.gif)\n## Question 2","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"977fcd","input":"# Tutorial 5\n\n## Question 1","pos":0,"type":"cell"}
{"id":0,"time":1639075372153,"type":"user"}
{"last_load":1639131975675,"type":"file"}