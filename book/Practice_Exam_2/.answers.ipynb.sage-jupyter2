{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":10,"id":"28850d","input":"sequence = \"F\"\nfor i in range(3):\n    draw_sequence(sequence, 60)\n    sequence = apply_koch_rule(sequence)\n    \n# [1] loop with correct number of iterations\n# [1] call two functions\n# (alternatively use repeated code instead of loop)\n\n    ","output":{"0":{"data":{"image/png":"7381f35cfcdd4b34f4c71d289903cec55b43ab1e","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":61,"width":331},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"d15a2c9716f82f6d2394a52e734753ed2c016bde","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":111,"width":322},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"72e75aa80ddcb0fa5add98be21bdfd0818d6c8f5","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":111,"width":306},"needs_background":"light"},"output_type":"execute_result"}},"pos":9,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"8cc7e9","input":"def apply_hilbert_rules(sequence):\n    s = \"\"\n    for c in sequence:\n        if c == \"X\":\n            s += \"-YF+XFX+FY-\"\n        elif c == \"Y\":\n            s += \"+XF-YFY-FX+\"\n        else: s += c\n        \n    return s\n\napply_hilbert_rules(\"XY\")\n\nsequence = \"X\"\nfor i in range(3):\n    sequence = apply_hilbert_rules(sequence)\n    draw_sequence(sequence, 90)\n    \n# [1] loop over characters in string\n# [1] if-elif statement\n# [1] string concatentation\n# [1] test passes correctly and three iterations drawn\n# -1 if rewriting fails in general case (e.g. using string.replace)","output":{"0":{"data":{"image/png":"64c874710b2a0170aefd6b5a900e9100a1b69a3e","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":302,"width":309},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"8a5f3f395c9087850cd133303122aa7753b1a1c6","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":302,"width":309},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"f6060b9b5dcfdbf523142bbdb5c0079b72239e84","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":302,"width":299},"needs_background":"light"},"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"10f802","input":"def apply_rules(sequence, rule_list):\n    symbol_list = []\n    string_list = []\n    for rule in rule_list:\n        a, b = rule.split(\"->\")\n        symbol_list.append(a)\n        string_list.append(b)\n        s = \"\"\n    for c in sequence:\n        if c in symbol_list:\n            i = symbol_list.index(c)\n            d = string_list[i]\n            s += d\n        else:\n            s += c\n    return s\n    \n\ns1 = apply_rules(\"AB\", [\"A->AB\", \"B->BA\"])\ns2 = apply_rules(\"AB\", [\"A->XY\", \"B->XZ\"])\nprint(s1, s2)\n\n# [2] construct lists of symbols and strings\n# [1] loop over characters\n# [2] identify rule corresponding to character\n# [1] concatenate string appropriately\n# [1] tests pass correctly\n# -1 if rewriting fails in general case (e.g. using string.replace)\n# -1 if fails for rule_list of length more than 2\n# -1 if fails for rule_list of length 1","output":{"0":{"name":"stdout","output_type":"stream","text":"ABBA XYXZ\n"},"1":{"data":{"image/png":"ea17f7c0cdc5decc1e24d27a2311ec6e910826f4","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":38,"metadata":{"image/png":{"height":111,"width":316},"needs_background":"light"},"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"8f577c","input":"import csv\n\ndef draw_l_system(axiom, theta, rule_list, n):\n    for i in range(n):\n        axiom = apply_rules(axiom, rule_list)\n    draw_sequence(axiom, theta)\n    \nwith open(\"lsysdata.txt\") as f:\n    reader = csv.reader(f)\n    next(reader)\n    for row in reader:\n        name = row[0]\n        n = int(row[1])\n        angle = float(row[2])\n        axiom = row[3]\n        rules = row[4:]\n        draw_l_system(axiom, angle, rules, n)\n        plt.title(name)\n        \n# [1] open file for reading\n# [1] read one row at a time, omitting first line\n# [2] identify name, n and angle with type conversion\n# [1] extract rules as list of strings\n# [2] draw the specified l-system\n# [1] add title to plot\n# -1 for each assumption the code makes about the contents of the file\n# (e.g. number of lines)\n        \n","output":{"0":{"data":{"image/png":"94d512e12d1f1b5dcbfae21fb73876f9db7e3ca4","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":41,"metadata":{"image/png":{"height":126,"width":313},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"a2dc4e9b4c07c657a9d353a11887a353559040de","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":41,"metadata":{"image/png":{"height":318,"width":311},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"48f0bcd0d63dae724c1fd2339ddf13916e5fe1ca","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":41,"metadata":{"image/png":{"height":318,"width":314},"needs_background":"light"},"output_type":"execute_result"},"3":{"data":{"image/png":"f2a097306876a1aba192b3a9a09b8da5150afc4d","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":41,"metadata":{"image/png":{"height":272,"width":321},"needs_background":"light"},"output_type":"execute_result"},"4":{"data":{"image/png":"77dcaf6ebeae4edb16f69be94e5edfaf16226b72","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":41,"metadata":{"image/png":{"height":318,"width":306},"needs_background":"light"},"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"3d2312","input":"import matplotlib.pyplot as plt\nimport numpy as np\n\ndef start(theta):\n    state[0] = 0\n    state[1] = 0\n    state[2] = 0\n    state[3] = theta\n    fig = plt.figure(figsize=(5,5))\n    ax = fig.add_subplot(111)\n    ax.set_aspect('equal', adjustable='box')\n    \ndef draw_forward():\n    x = state[0]\n    y = state[1]\n    angle = state[2]\n    state[0] = x + np.cos(angle)\n    state[1] = y + np.sin(angle)\n    plt.plot([x, state[0]], [y, state[1]], color=\"black\",\n    linewidth=2)\n    \ndef rotate_left():\n    theta = state[3]\n    state[2] = state[2] + theta * np.pi / 180\n\nstate = [0, 0, 0, 0]\n    \n# Example: draw an L\nstart(90)\ndraw_forward()\nrotate_left()\ndraw_forward()","output":{"0":{"data":{"image/png":"14eb9cd645e2ec71d61d6f9ff5571b4d1a9c25fc","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":6,"metadata":{"image/png":{"height":302,"width":309},"needs_background":"light"},"output_type":"execute_result"}},"pos":1,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"575625","input":"def rotate_right():\n    theta = state[3]\n    state[2] = state[2] - theta * np.pi / 180\n    \nstart(60)\ndraw_forward()\nrotate_left()\ndraw_forward()\nrotate_right()\nrotate_right()\ndraw_forward()\nrotate_left()\ndraw_forward()\n\n# [1] correct rotate_right function definition\n# [1] call start with correct angle\n# [1] correct sequence of function calls\n    ","output":{"0":{"data":{"image/png":"d15a2c9716f82f6d2394a52e734753ed2c016bde","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":7,"metadata":{"image/png":{"height":111,"width":322},"needs_background":"light"},"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"4be9c1","input":"def draw_sequence(sequence, angle):\n    start(angle)\n    for c in sequence:\n        if c == \"F\":\n            draw_forward()\n        if c == \"-\":\n            rotate_left()\n        if c == \"+\":\n            rotate_right()\n            \ndraw_sequence(\"F-F++F-F\", 60)\n\n# [1] call start\n# [1] loop over characters\n# [1] if statements\n# [1] test passes correctly","output":{"0":{"data":{"image/png":"d15a2c9716f82f6d2394a52e734753ed2c016bde","text/plain":"<Figure size 360x360 with 1 Axes>"},"exec_count":8,"metadata":{"image/png":{"height":111,"width":322},"needs_background":"light"},"output_type":"execute_result"}},"pos":5,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"fed56c","input":"def apply_koch_rule(sequence):\n    s = \"\"\n    for c in sequence:\n        if c == \"F\":\n            s += \"F-F++F-F\"\n        else:\n            s += c\n    return s\n\ndef apply_koch_rule_2(sequence):\n    return sequence.replace(\"F\", \"F-F++F-F\")\n            \n            \napply_koch_rule(\"XFAF\")\n\n# [1] character replacement by either of above methods\n# [1] test passes correctly\n","output":{"0":{"data":{"text/plain":"'XF-F++F-FAF-F++F-F'"},"exec_count":9,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"006393","input":"## Question 2","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"4d65bb","input":"## Question 3","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"4dd731","input":"## Question 7","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"6fd0b7","input":"## Question 1","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"73e0c0","input":"## Question 4","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"addbcd","input":"# NSCI0007 Practice Exam 2\n## Specimen Answers and Mark Scheme\n- The specimen code below demonstrates one way to correctly answer the questions.\n- Full marks will be awarded if the candidate has implemented another suitable method and the code behaves as specified in the question.\n- If the candidate's code produces an error, or does not behave as specified in the question, partial credit will be awarded as described in the mark scheme.\n- Where a candidate has used a different method to below, partial credit will be awarded in an analogous way.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"c2a619","input":"## Question 5","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"d92888","input":"## Question 6","pos":12,"type":"cell"}
{"id":0,"time":1639495834436,"type":"user"}
{"last_load":1639495844611,"type":"file"}