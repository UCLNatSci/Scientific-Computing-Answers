{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-02b41259-778d-40f6-87d3-755f27a4f43c.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"markdown","id":"135af8","input":"### Step 4","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"618fa1","input":"## Question 2\n\nThe answer below includes only the English and French languages. It is not difficult to extend to further languages.\n\nHow might  you extend to an arbitrary number of languages...?","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"77f02d","input":"# Tutorial 4\n\n## Question 1\n\n### Step 1","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cfccf6","input":"### Step 3","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"d32b4d","input":"### Step 2\n","pos":2,"type":"cell"}
{"end":1637425916090,"exec_count":42,"id":"2f6da6","input":"def translate(codon):\n    genetic_code = [\"GCA\", \"GCC\", \"GCG\", \"GCU\", \"UGC\", \"UGU\", \"GAC\", \"GAU\", \"GAA\", \"GAG\", \"UUC\", \"UUU\", \"GGA\", \"GGC\", \"GGG\", \"GGU\", \"CAC\", \"CAU\", \"AUA\", \"AUC\", \"AUU\", \"AAA\", \"AAG\", \"UUA\", \"UUG\", \"CUA\", \"CUC\", \"CUG\", \"CUU\", \"AUG\",                         \"AAC\", \"AAU\", \"CCA\", \"CCC\", \"CCG\", \"CCU\", \"CAA\", \"CAG\", \"AGA\", \"AGG\", \"CGA\", \"CGC\", \"CGU\", \"CGG\", \"AGC\", \"AGU\", \"UCA\", \"UCC\", \"UCG\", \"UCU\", \"ACA\", \"ACC\", \"ACG\", \"ACU\", \"GUA\", \"GUC\", \"GUG\", \"GUU\", \"UGG\", \"UAC\",                         \"UAU\", \"UAG\", \"UAA\", \"UGA\"]\n\n    amino_acids = [\"A\", \"A\", \"A\", \"A\", \"C\", \"C\", \"D\", \"D\", \"E\", \"E\", \"F\", \"F\", \"G\", \"G\", \"G\", \"G\", \"H\", \"H\", \"I\", \"I\", \"I\", \"K\", \"K\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"M\", \"N\", \"N\", \"P\", \"P\", \"P\", \"P\", \"Q\", \"Q\", \"R\", \"R\", \"R\", \"R\",                         \"R\", \"R\", \"S\", \"S\", \"S\", \"S\", \"S\", \"S\", \"T\", \"T\", \"T\", \"T\", \"V\", \"V\", \"V\", \"V\", \"W\", \"Y\", \"Y\", \"!\", \"!\", \"!\"]\n    i = genetic_code.index(codon)\n    aa = amino_acids[i]\n    return aa\n\nx = translate(\"AAA\")\nprint(x)","kernel":"python3","output":{"0":{"name":"stdout","text":"K\n"}},"pos":3,"start":1637425916084,"state":"done","type":"cell"}
{"end":1637425916786,"exec_count":43,"id":"cc4523","input":"def translate_sequence(sequence):\n    j = start_index(sequence)\n    n = len(sequence)\n    result = \"\"\n    for i in range(j, n-3, 3):\n        codon = sequence[i:i+3]\n        if codon == \"UAG\" or codon == \"UAA\" or codon == \"UGA\":\n            break\n        else:\n            result = result + translate(codon)\n    return result\n    \n\nrna_seq = \"GCAUAUGUUCAUAUGAAUA\"\naa = translate_sequence(rna_seq)\nprint(aa)","kernel":"python3","output":{"0":{"name":"stdout","text":"MFI\n"}},"pos":5,"start":1637425916770,"state":"done","type":"cell"}
{"end":1637425916813,"exec_count":44,"id":"0b5b8c","input":"rna_1 = \"CAACAAUGCUCCCCGCCUAGUUG\"\nprint(translate_sequence(rna_1))\n\nrna_2 = \"UAAAAUGAAUAAUAGAUAA\"\nprint(translate_sequence(rna_2))","kernel":"python3","output":{"0":{"name":"stdout","text":"MLPA\nMNNR\n"}},"pos":7,"start":1637425916791,"state":"done","type":"cell"}
{"end":1637425917606,"exec_count":45,"id":"f6c197","input":"import matplotlib.pyplot as plt\n\nfreq_french = [7.60, 0.96, 3.39, 4.08, 14.47, 1.12, 1.18, 0.93, 7.21, 0.30, 0.16, 5.86, 2.78, 7.32, 5.39, 2.98, 0.85, 6.86, 7.98, 7.11, 5.55, 1.29, 0.08, 0.43, 0.34, 0.10]\ns = sum(freq_french)\n# ensure the sum is 1\nfor i in range(26):\n    freq_french[i] /= s\n\nfreq_eng = [8.34, 1.54, 2.73, 4.14, 12.60, 2.03, 1.92, 6.11, 6.71, 0.23, 0.87, 4.24, 2.53, 6.80, 7.70, 1.66, 0.09, 5.68, 6.11, 9.37, 2.85, 1.06, 2.34, 0.20, 2.04, 0.06]\ns = sum(freq_eng)\n# ensure the sum is 1\nfor i in range(26):\n    freq_eng[i] /= s\n\n\nwith open(\"french.txt\") as f:\n     text = f.read()\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\ncounts = [0] * 26 # this syntax creates a list containing 26 zeros\n\ntext = text.lower()\nfor c in text:\n    i = alphabet.find(c)\n    if i > -1:\n        counts[i] += 1\n\ns = sum(counts)\n\nfor i in range(26):\n    counts[i] = counts[i] / s\n\nplt.figure(figsize=(5,3))\nplt.bar(list(alphabet), counts)\nplt.ylabel(\"frequency\")\n\nsim_eng = 0\nsim_french = 0\nfor i in range(26):\n    sim_eng += (freq_eng[i] - counts[i])**2\n    sim_french += (freq_french[i] - counts[i])**2\n    \nm = min(sim_eng, sim_french)\nif m == sim_eng:\n    print(\"English\")\nelif m == sim_french:\n    print(\"French\")","kernel":"python3","output":{"0":{"name":"stdout","text":"French\n"},"1":{"data":{"image/png":"0f56321f4694e48517a86fca8d6da807553db33e","text/plain":"<Figure size 360x216 with 1 Axes>"},"metadata":{"image/png":{"height":193,"width":336},"needs_background":"light"}}},"pos":9,"start":1637425917251,"state":"done","type":"cell"}
{"exec_count":41,"id":"cdf256","input":"def start_index(sequence):\n    n = len(sequence)\n    for i in range(n):\n        if sequence[i:i+3] == \"AUG\":\n            break\n    return i\n\n\nrna_seq = \"GCAUAUGUUCAUAUGAAUA\"\n\nj = start_index(rna_seq)\nprint(j)","kernel":"python3","output":{"0":{"name":"stdout","text":"4\n"}},"pos":1,"state":"done","type":"cell"}
{"last_load":1637423471151,"type":"file"}