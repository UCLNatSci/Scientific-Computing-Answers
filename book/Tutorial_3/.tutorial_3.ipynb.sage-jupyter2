{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-3854f3f0-9605-4fe2-acfd-9eba91f75106.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"c55564","input":"","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"e64756","input":"#1\n\nimport matplotlib.pyplot as plt\n\ntime = [0, 1, 2, 3, 4, 5, 6]\nposition = [0, 0.15, 0.61, 1.35, 2.40, 3.75, 5.41]\n\nplt.plot(time, position)\n\nplt.title(\"Train Position\")\nplt.ylabel(\"Time (s)\")\nplt.xlabel(\"Position (m)\")\n","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f1e679394c0>]"},"exec_count":1,"output_type":"execute_result"},"1":{"data":{"image/png":"9a4cd37c7d621086f8d75842478c7c8b7338754e","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":1,"metadata":{"image/png":{"height":411,"width":697},"needs_background":"light"},"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"eb9399","input":"import matplotlib.pyplot as plt\n\npressure_data = [1018.3, 1018.3, 1015.7, 1014.3, 1011.8, 1011.4, 1015.5, 1016.0, 1016.9, 1016.8, 1016.4, 1017.5, 1018.8, 1018.1, 1017.1, 1018.4, 1022.0, 1022.8, 1021.8, 1020.5, 1021.0, 1019.8, 1018.9, 1018.4, 1017.8, 1018.1, 1019.6, 1017.4, 1015.8, 1015.5, 1017.5, 1018.9, 1017.7, 1014.4, 1014.2, 1016.0, 1016.1, 1015.6, 1016.4, 1015.7, 1016.6, 1019.6, 1021.6, 1021.4, 1020.6, 1017.6, 1016.5, 1016.2, 1013.0, 1005.4, 1007.4, 1012.2, 1015.2, 1016.1, 1014.3, 1012.4, 1014.2, 1013.1, 1012.9, 1012.1, 1010.6, 1010.0, 1010.5, 1010.3, 1007.4, 1008.9, 1007.4, 1006.9, 1009.8, 1014.8, 1014.9, 1016.6, 1014.1, 1011.1, 1010.7, 1009.8, 1011.9, 1012.6, 1011.8, 1009.8, 1008.9, 1010.6, 1009.9, 1010.2, 1009.5, 1009.0, 1007.1, 1007.1, 1007.5, 1005.0, 1004.2, 1004.2, 1007.2, 1005.0, 1002.9, 1007.4, 1010.4, 1010.6, 1008.6, 1006.2, 1005.9, 1006.8, 1004.6, 1002.4, 1003.2, 1004.4, 1003.1, 1000.9, 998.6, 999.9, 1001.6, 1002.1, 1004.1]\n\n\npressure_smoothed = []\nfor i in range(len(pressure_data)-1):\n    pressure_smoothed.append(0.5*(pressure_data[i] + pressure_data[i+1]))\n    \nplt.plot(pressure_data)\nplt.plot(pressure_smoothed)\n\n\n","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f1e5f44bd60>]"},"exec_count":13,"output_type":"execute_result"},"1":{"data":{"image/png":"08de0660ea029636a5bfc1f6709da890d30435ec","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":13,"metadata":{"image/png":{"height":411,"width":716},"needs_background":"light"},"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"dc4cc3","input":"\npressure_smoothed = []\nn = 10\nfor i in range(len(pressure_data)-n+1):\n    #calculate average of n points\n    avg = 0\n    for j in range(i, i+n):\n        avg = avg + pressure_data[j]\n    avg = avg / n\n    pressure_smoothed.append(avg)\n    \nplt.plot(pressure_data)\nplt.plot(pressure_smoothed)","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f1e5f293070>]"},"exec_count":16,"output_type":"execute_result"},"1":{"data":{"image/png":"a2b4814909792643b8e4c9deeb93bdb5e67bcb93","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":16,"metadata":{"image/png":{"height":411,"width":716},"needs_background":"light"},"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"4f032c","input":"\ndna_seq = \"gttccccaagctcttacataaatgtcgtagggttccagctacgtgttgttgggccaccca\"\n\nletters = [\"a\", \"g\", \"c\", \"t\"]\nnames = [\"Adenine\", \"Guanine\", \"Cytosine\", \"Thymine\"]\n\nfor c in dna_seq:\n    i = letters.index(c)\n    name = names[i]\n    print(name, end=\", \")","output":{"0":{"name":"stdout","output_type":"stream","text":"Guanine, Thymine, Thymine, Cytosine, Cytosine, Cytosine, Cytosine, Adenine, Adenine, Guanine, Cytosine, Thymine, Cytosine, Thymine, Thymine, Adenine, Cytosine, Adenine, Thymine, Adenine, Adenine, Adenine, Thymine, Guanine, Thymine, Cytosine, Guanine, Thymine, Adenine, Guanine, Guanine, Guanine, Thymine, Thymine, Cytosine, Cytosine, Adenine, Guanine, Cytosine, Thymine, Adenine, Cytosine, Guanine, Thymine, Guanine, Thymine, Thymine, Guanine, Thymine, Thymine, Guanine, Guanine, Guanine, Cytosine, Cytosine, Adenine, Cytosine, Cytosine, Cytosine, Adenine, "}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"e39edb","input":"import numpy as np\nimport matplotlib.pyplot as plt\n\ns = 93 # launch speed 93 m/s\ntheta = np.pi/4 # pi/4 radians equals 45 degrees\n\nDELTA_T = 0.01\ng = 9.8\n\nx = 0 # initial x, y positions\ny = 0\nvx = s * np.cos(theta) # initial x, y velocities\nvy = s * np.sin(theta)\n\ndis = 900\n\nx_list = []\ny_list = []\n\nwhile y >= 0:\n    x_list.append(x)\n    y_list.append(y)\n    x = x + vx * DELTA_T\n    y = y + vy * DELTA_T\n    \n    vy = vy - g * DELTA_T\n    \nplt.figure(figsize=(4,4))\nplt.plot(x_list, y_list)\nplt.xlim(0, 1000)\nplt.ylim(0, 1000)\nplt.scatter(dis, 0) # plot the location of the target\n\nif x > dis - 20 and x < dis + 20:\n    print(\"hit\")\nelse:\n    print(\"miss\")","output":{"0":{"name":"stdout","output_type":"stream","text":"hit\n"},"1":{"data":{"image/png":"3ac75e868414cf251c41db5f0d26f633d28019d8","text/plain":"<Figure size 288x288 with 1 Axes>"},"exec_count":18,"metadata":{"image/png":{"height":252,"width":283},"needs_background":"light"},"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"e384f8","input":"#2,3\n\npos_est = []\n#a = 0.2\n#change value of a until the two lines match\na = 0.3\nfor t in time:\n    s = 0.5 * a * t**2\n    pos_est.append(s)\n    \nplt.plot(time, position, label=\"actual position\")\nplt.plot(time, pos_est, label=\"estimated position\")\nplt.legend()\n\n# acceleration is 0.3 m/s^2\n","output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x7f1e5f4dee80>"},"exec_count":9,"output_type":"execute_result"},"1":{"data":{"image/png":"69a4ff5061f5070cb36b025f40bced2780782ab4","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":9,"metadata":{"image/png":{"height":411,"width":697},"needs_background":"light"},"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"48c36c","input":"### Challenge\n\nLater we will see an easier way to do this using `numpy` arrays.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"8343c6","input":"# Tutorial 3\n\n## Question 1","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"c6e7a1","input":"## Question 3","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"e29590","input":"## Question 4","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"e573c1","input":"## Question 2","pos":3,"type":"cell"}
{"id":0,"time":1638287283718,"type":"user"}
{"last_load":1638287283958,"type":"file"}